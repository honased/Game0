using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using System;
using System.Collections.Generic;
using System.Text;

namespace Game0
{
    /// <summary>
    /// A class representing Fire
    /// </summary>
    public class Fire : Entity
    {
        private const double FIRE_TIME = 0.8f;
        private AnimatedSprite _sprite;
        private float _fireScale;
        private double _fireTimer;
        private Random _random;
        private List<FireParticle> _particles;
        private double _fireParticleTimer;
        private ContentManager content;

        /// <summary>
        /// Create a new Fire entity
        /// </summary>
        /// <param name="random">A random number generator</param>
        public Fire(Random random)
        {
            _random = random;
            _particles = new List<FireParticle>();
        }

        /// <summary>
        /// Load the content required by the Fire Entity
        /// </summary>
        /// <param name="content">The Content Manager</param>
        public override void LoadContent(ContentManager content)
        {
            this.content = content;
            _sprite = new AnimatedSprite(content.Load<Texture2D>("Sprites/Fire"), 24, 29, 0.15f) { Position = new Vector2(143, 131) };
        }
        
        /// <summary>
        /// Update the Fire Entity
        /// </summary>
        /// <param name="gameTime">The current game time</param>
        public override void Update(GameTime gameTime)
        {
            _sprite.Update(gameTime);

            _fireTimer += gameTime.ElapsedGameTime.TotalSeconds;
            if (_fireTimer > .1f)
            {
                _fireTimer -= .1f;
                _fireScale = ((((float)_random.NextDouble()) * 2) - 1) / 16.0f;
            }

            // Generate Particles
            _fireParticleTimer += gameTime.ElapsedGameTime.TotalSeconds;

            if (_fireParticleTimer >= FIRE_TIME)
            {
                _fireParticleTimer -= FIRE_TIME;
                var particle = new FireParticle(_random) { Position = new Vector2(153, 145) };
                particle.LoadContent(content);
                _particles.Add(particle);
            }

            foreach (FireParticle particle in _particles) particle.Update(gameTime);

            for (int i = 0; i < _particles.Count; i++)
            {
                if (_particles[i].Dead)
                {
                    _particles.RemoveAt(i);
                    i--;
                }
            }

        }

        /// <summary>
        /// Draw the fire entity
        /// </summary>
        /// <param name="gameTime">The current game time</param>
        /// <param name="spriteBatch">A sprite batcher</param>
        public override void Draw(GameTime gameTime, SpriteBatch spriteBatch)
        {
            _sprite.Draw(gameTime, spriteBatch);
            foreach (FireParticle particle in _particles) particle.Draw(gameTime, spriteBatch);
        }

        /// <summary>
        /// Draw the light generated by the fire
        /// </summary>
        /// <param name="gameTime">The current game time</param>
        /// <param name="spriteBatch">A sprite batcher</param>
        /// <param name="lightTexture">A light texture</param>
        public override void DrawLight(GameTime gameTime, SpriteBatch spriteBatch, Texture2D lightTexture)
        {
            spriteBatch.Draw(lightTexture, new Vector2(155, 145), null, Color.White, 0.0f, new Vector2(16, 16), 1.5f + _fireScale, SpriteEffects.None, 0f);

            foreach (FireParticle particle in _particles) particle.DrawLight(gameTime, spriteBatch, lightTexture);
        }
    }
}
